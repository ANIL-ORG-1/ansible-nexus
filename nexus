#!/usr/bin/env python

DOCUMENTATION='''
---
module: nexus
short_description: Download and installs an artifact from nexus. See https://github.com/mihxil/ansible-nexus
author: Michiel Meeuwissen
'''

EXAMPLES='''
- name: get statistics jar
  nexus: nexus=http://nexus.vpro.nl artifactId=nl.vpro.stats:stats-backend:0.3-SNAPSHOT extension=jar
'''


import sys
import json
import os
import shlex
import urllib2
from datetime import datetime
import time
from wsgiref.handlers import format_date_time



def main():
    args_file = sys.argv[1]
    args_data = file(args_file).read()
    arguments = shlex.split(args_data)

    # default values
    extension = "war"
    repo = ""
    destdir = "downloaded_artifacts"
    for arg in arguments:
        if "=" in arg:
            (key, value) = arg.split("=")
            if key == "artifactId":
                artifactId = value
            if key == "nexus":
                nexus = value
            if key == "extension":
                extension = value
            if key == "repository":
                repo = value


    split =  artifactId.split(":")
    (groupId, artifactId, version)  = split[0:3]

    if len(split) >= 4:
        classifier = "&c=" + split[3]
    else:
        classifier = ""


    if  "$classifier" == "":
        postfix = ""
    else:
        postfix = "-" + classifier

    artifactFileName = artifactId + "-" + version + postfix + extension
    if repo == "":
        if "SNAPSHOT" in version:
            repo = "snapshots"
        else:
            repo = "releases"

    artifactDownload = nexus + "/service/local/artifact/maven/redirect?r=" + repo + "&g=" + groupId + "&a=" + artifactId + "&v=" + version + "&e=" + extension + classifier
    if not os.path.exists(destdir):
        os.mkdir(destdir)
    dest = destdir + "/" + artifactId + "-" + version + "." + extension
    resp = get(artifactDownload, dest)

    print json.dumps({
        "artifactId" : artifactId,
        "nexus": nexus,
        "artifactDownload": artifactDownload,
        "dest": dest,
        "repository": repo,
        "changes": resp['changes'],
        "response":  {"code": resp['code']}
    })


def get(url, dest):
    try:
        headers = {}
        if os.path.isfile(dest):
            headers['IF-Modified-Since'] = format_date_time(time.mktime(datetime.fromtimestamp(os.path.getmtime(dest)).timetuple()))

        request = urllib2.Request(url, None, headers)
        response = urllib2.urlopen(request)
        if response.code == 200:
            handle  = open(dest,'wb')
            handle.write(response.read())
            handle.close()
        return {"code": response.code, "changes": response.code == 200}
    except Exception as e:
        if hasattr(e, "code"):
            return {"code": e.code, "changes": e.code == 200}
        raise e


if __name__ == "__main__":
    main()
